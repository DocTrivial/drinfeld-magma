q := 4;
n := 6;
m := n;
r := 3;

Fq := FiniteField(q);
A<x> := PolynomialRing(Fq);
c := Fq.1;
L_mod := x^6 + (c + 1)*x^4 + x^3 + (c + 1)*x^2 + c*x + 1;
L := ext<Fq | L_mod>;
dm := [L.1, (Fq.1 + 1)*L.1^5 + L.1^4 + Fq.1*L.1^3 + Fq.1*L.1^2 + Fq.1*L.1 + 1, L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1, Fq.1*L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1 + 1];
Lp<y> := PolynomialRing(L);

// Note to Self: this appears to be correct
function phi_x_imgs(dm, L, n, r, deg)
	phi_x_matr := ZeroMatrix(L, deg, r*deg+1);
	for i := 1 to r + 1 do
		phi_x_matr[1, i] := dm[i];
	end for;
	for i := 2 to deg do
		for j:= 0 to r*i do
			low_deg := Max([j - r*(i-1), 0]);
			high_deg := Min([r, j]);
			recs := [ L | Frobenius(phi_x_matr[i-1][j - k + 1], k): k in [low_deg..high_deg]  ];
			for s := low_deg to high_deg do
				phi_x_matr[i,j+1] +:= phi_x_matr[1,s+1]*recs[s - low_deg + 1];
			end for; 
		end for;  
	end for;
	return phi_x_matr;
end function;

function gekeler(dm, L, n, r)
	pxm := phi_x_imgs(dm, L, n, r, n);
	print(dm);
	print("phi x matrix");
	print(pxm);
	nrow := n*r + 1;
	ncol := 0;
	degs := [Integers() | (n*(r - j)) div r : j in [0..r-1] ];
	shifts := [Integers() | degs[i] + 1 : i in [1..r]];
	deg_off := [0];
	print("shifts/off");
	print(shifts);
	for i := 1 to r do
		Append(~deg_off, deg_off[i] + shifts[i]);
		ncol +:= shifts[i];
	end for;
	print(deg_off);
	sys := ZeroMatrix(L, nrow, ncol);
	rhs := Vector([L | 0: i in [1..nrow]]);
	rhs[nrow] := -1;
	print("nrows/ncols");
	print(nrow);
	print(ncol);
	for j := 0 to r-1 do
		for k := 0 to shifts[j + 1] - 1 do
			//print("sft");
			//print(shifts[j + 1]);
			for i := 0 to k*r do
				if k eq 0 and i eq 0 then
					sys[i + n*j + 1, deg_off[j + 1] + k + 1] := 1;
				elif k eq 0 then
					sys[i + n*j + 1, deg_off[j + 1] + k + 1] := 0;
				else
					sys[i + n*j + 1, deg_off[j + 1] + k + 1] := pxm[k, i + 1];
				end if;
			end for;
		end for;
	end for;
	print("gekeler system");
	print(sys[5]);
	sol := Solution(Transpose(sys), rhs);
	return sol;	
end function;

tst := gekeler(dm, L, n, r);
